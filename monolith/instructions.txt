export DOCKER_HOST=unix:////run/user/113909/podman/podman.sock
# export JAVA_HOME = ~/.sdkman/candidates/java/current
export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.412.b06-1.fc39.x86_64
# oc new-app --template=eap74-basic-s2i -p SOURCE_REPOSITORY_URL=https://github.com/ticket-monster-msa/monolith.git -p SOURCE_REPOSITORY_REF=master -p CONTEXT_DIR=monolith -p EAP_IMAGE_NAME=jboss-eap74-openjdk8-openshift:7.4.0 -p EAP_RUNTIME_IMAGE_NAME=jboss-eap74-openjdk8-runtime-openshift:7.4.0
# oc new-app --name=ticket-monster --template=eap74-basic-s2i -p APPLICATION_NAME=ticket-monster -p SOURCE_REPOSITORY_URL=https://github.com/codequester/monolith.git -p SOURCE_REPOSITORY_REF=main -p CONTEXT_DIR=monolith/monolith -p EAP_IMAGE_NAME=jboss-eap74-openjdk8-openshift:7.4.0 -p EAP_RUNTIME_IMAGE_NAME=jboss-eap74-openjdk8-runtime-openshift:7.4.0
# oc start-build ticket-monster-build-artifacts --incremental=true

###### Demo Start
## Step 1: Configure SMCP and SMMR
## Step 2: Deploy the monolith
    oc new-app --name=ticket-monster --template=eap71-basic-s2i -p APPLICATION_NAME=ticket-monster -p SOURCE_REPOSITORY_URL=https://github.com/codequester/monolith.git -p SOURCE_REPOSITORY_REF=main -p CONTEXT_DIR=monolith/monolith 
    oc start-build ticket-monster
    ## Remove the probes from DC
    ## Annotate the dc for istio
    ## Configure GW and VS for monolith and remove the app route created by oc new-app
## Step 3: Carve out the UI Part (but not removed from monolith) --> tm-ui-v1
    oc apply -f  ~/tech/workspace/mono-micro-wkshp/ticketmaster/monolith/deployment/kubernetes/core/frontend/tm-ui-svc.yml"
    oc apply -f ~/tech/workspace/mono-micro-wkshp/ticketmaster/monolith/deployment/kubernetes/core/frontend/talk-to-monolith/tm-ui-deployment.yml"
    ## Test the UI and its interaction with monolith
    ## Once satisfied, Annotate the dc for istio
    ## Edit the VS to split traffic between monolith and UI ( The weight for UI will 100, and hence will be taking the entire traffic before next step) 
## Step 4: Modify the monolith to remove the UI and deploy it
    oc new-app --name=backend-v1 --template=eap71-basic-s2i -p APPLICATION_NAME=backend-v1 -p SOURCE_REPOSITORY_URL=https://github.com/codequester/monolith.git -p SOURCE_REPOSITORY_REF=main -p CONTEXT_DIR=monolith/backend-v1 
    oc start-build backend-v1
    ## Remove the probes from DC
    ## Annotate the dc for istio
## Step 5: Deploy another verion of UI, that interacts with the backend (This is monolith that has the UI part removed)  --> tm-ui-v2
    oc apply -f ~/tech/workspace/mono-micro-wkshp/ticketmaster/monolith/deployment/kubernetes/core/frontend/talk-to-backend/tm-ui-deployment.yml
    ## Show case the traffic shifting feature based on the header value
        ## Create a Destination Rules to define the subsets of UI apps (1 talks to monolith, 1 talks to backend)
        ## Edit the VS, remove the entry for old monolith and introduce header match based routing
## Step 6: Strangle the monolith more by creating a admin-service that will be evolve by slowly introducd the admin services
    oc new-app --name=vendor-mgmt-svc --template=eap71-basic-s2i -p APPLICATION_NAME=vendor-mgmt-svc -p SOURCE_REPOSITORY_URL=https://github.com/codequester/monolith.git -p SOURCE_REPOSITORY_REF=main -p CONTEXT_DIR=monolith/vendor-mgmt-service 
    oc start-build admin-service
    ## Remove the probes from DC
    ## Annotate the dc for istio
    ## Configure VS for routing traffic to admin-service based on path
